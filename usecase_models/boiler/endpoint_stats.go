// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EndpointStat is an object representing the database table.
type EndpointStat struct {
	Time             time.Time   `boil:"time" json:"time" toml:"time" yaml:"time"`
	SessionID        string      `boil:"session_id" json:"session_id" toml:"session_id" yaml:"session_id"`
	ProjectID        int         `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	EndpointName     null.String `boil:"endpoint_name" json:"endpoint_name,omitempty" toml:"endpoint_name" yaml:"endpoint_name,omitempty"`
	EndpointID       int         `boil:"endpoint_id" json:"endpoint_id" toml:"endpoint_id" yaml:"endpoint_id"`
	URL              null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	DatacenterID     int         `boil:"datacenter_id" json:"datacenter_id" toml:"datacenter_id" yaml:"datacenter_id"`
	IsHeartBeat      bool        `boil:"is_heart_beat" json:"is_heart_beat" toml:"is_heart_beat" yaml:"is_heart_beat"`
	Success          int         `boil:"success" json:"success" toml:"success" yaml:"success"`
	ResponseTime     float64     `boil:"response_time" json:"response_time" toml:"response_time" yaml:"response_time"`
	ResponseTimes    null.String `boil:"response_times" json:"response_times,omitempty" toml:"response_times" yaml:"response_times,omitempty"`
	ResponseBodies   null.Bytes  `boil:"response_bodies" json:"response_bodies,omitempty" toml:"response_bodies" yaml:"response_bodies,omitempty"`
	ResponseHeaders  null.String `boil:"response_headers" json:"response_headers,omitempty" toml:"response_headers" yaml:"response_headers,omitempty"`
	ResponseStatuses null.String `boil:"response_statuses" json:"response_statuses,omitempty" toml:"response_statuses" yaml:"response_statuses,omitempty"`

	R *endpointStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L endpointStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EndpointStatColumns = struct {
	Time             string
	SessionID        string
	ProjectID        string
	EndpointName     string
	EndpointID       string
	URL              string
	DatacenterID     string
	IsHeartBeat      string
	Success          string
	ResponseTime     string
	ResponseTimes    string
	ResponseBodies   string
	ResponseHeaders  string
	ResponseStatuses string
}{
	Time:             "time",
	SessionID:        "session_id",
	ProjectID:        "project_id",
	EndpointName:     "endpoint_name",
	EndpointID:       "endpoint_id",
	URL:              "url",
	DatacenterID:     "datacenter_id",
	IsHeartBeat:      "is_heart_beat",
	Success:          "success",
	ResponseTime:     "response_time",
	ResponseTimes:    "response_times",
	ResponseBodies:   "response_bodies",
	ResponseHeaders:  "response_headers",
	ResponseStatuses: "response_statuses",
}

var EndpointStatTableColumns = struct {
	Time             string
	SessionID        string
	ProjectID        string
	EndpointName     string
	EndpointID       string
	URL              string
	DatacenterID     string
	IsHeartBeat      string
	Success          string
	ResponseTime     string
	ResponseTimes    string
	ResponseBodies   string
	ResponseHeaders  string
	ResponseStatuses string
}{
	Time:             "endpoint_stats.time",
	SessionID:        "endpoint_stats.session_id",
	ProjectID:        "endpoint_stats.project_id",
	EndpointName:     "endpoint_stats.endpoint_name",
	EndpointID:       "endpoint_stats.endpoint_id",
	URL:              "endpoint_stats.url",
	DatacenterID:     "endpoint_stats.datacenter_id",
	IsHeartBeat:      "endpoint_stats.is_heart_beat",
	Success:          "endpoint_stats.success",
	ResponseTime:     "endpoint_stats.response_time",
	ResponseTimes:    "endpoint_stats.response_times",
	ResponseBodies:   "endpoint_stats.response_bodies",
	ResponseHeaders:  "endpoint_stats.response_headers",
	ResponseStatuses: "endpoint_stats.response_statuses",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var EndpointStatWhere = struct {
	Time             whereHelpertime_Time
	SessionID        whereHelperstring
	ProjectID        whereHelperint
	EndpointName     whereHelpernull_String
	EndpointID       whereHelperint
	URL              whereHelpernull_String
	DatacenterID     whereHelperint
	IsHeartBeat      whereHelperbool
	Success          whereHelperint
	ResponseTime     whereHelperfloat64
	ResponseTimes    whereHelpernull_String
	ResponseBodies   whereHelpernull_Bytes
	ResponseHeaders  whereHelpernull_String
	ResponseStatuses whereHelpernull_String
}{
	Time:             whereHelpertime_Time{field: "\"endpoint_stats\".\"time\""},
	SessionID:        whereHelperstring{field: "\"endpoint_stats\".\"session_id\""},
	ProjectID:        whereHelperint{field: "\"endpoint_stats\".\"project_id\""},
	EndpointName:     whereHelpernull_String{field: "\"endpoint_stats\".\"endpoint_name\""},
	EndpointID:       whereHelperint{field: "\"endpoint_stats\".\"endpoint_id\""},
	URL:              whereHelpernull_String{field: "\"endpoint_stats\".\"url\""},
	DatacenterID:     whereHelperint{field: "\"endpoint_stats\".\"datacenter_id\""},
	IsHeartBeat:      whereHelperbool{field: "\"endpoint_stats\".\"is_heart_beat\""},
	Success:          whereHelperint{field: "\"endpoint_stats\".\"success\""},
	ResponseTime:     whereHelperfloat64{field: "\"endpoint_stats\".\"response_time\""},
	ResponseTimes:    whereHelpernull_String{field: "\"endpoint_stats\".\"response_times\""},
	ResponseBodies:   whereHelpernull_Bytes{field: "\"endpoint_stats\".\"response_bodies\""},
	ResponseHeaders:  whereHelpernull_String{field: "\"endpoint_stats\".\"response_headers\""},
	ResponseStatuses: whereHelpernull_String{field: "\"endpoint_stats\".\"response_statuses\""},
}

// EndpointStatRels is where relationship names are stored.
var EndpointStatRels = struct {
	Datacenter string
	Endpoint   string
}{
	Datacenter: "Datacenter",
	Endpoint:   "Endpoint",
}

// endpointStatR is where relationships are stored.
type endpointStatR struct {
	Datacenter *Datacenter `boil:"Datacenter" json:"Datacenter" toml:"Datacenter" yaml:"Datacenter"`
	Endpoint   *Endpoint   `boil:"Endpoint" json:"Endpoint" toml:"Endpoint" yaml:"Endpoint"`
}

// NewStruct creates a new relationship struct
func (*endpointStatR) NewStruct() *endpointStatR {
	return &endpointStatR{}
}

func (r *endpointStatR) GetDatacenter() *Datacenter {
	if r == nil {
		return nil
	}
	return r.Datacenter
}

func (r *endpointStatR) GetEndpoint() *Endpoint {
	if r == nil {
		return nil
	}
	return r.Endpoint
}

// endpointStatL is where Load methods for each relationship are stored.
type endpointStatL struct{}

var (
	endpointStatAllColumns            = []string{"time", "session_id", "project_id", "endpoint_name", "endpoint_id", "url", "datacenter_id", "is_heart_beat", "success", "response_time", "response_times", "response_bodies", "response_headers", "response_statuses"}
	endpointStatColumnsWithoutDefault = []string{"time", "session_id", "project_id", "endpoint_id", "datacenter_id", "is_heart_beat", "success", "response_time"}
	endpointStatColumnsWithDefault    = []string{"endpoint_name", "url", "response_times", "response_bodies", "response_headers", "response_statuses"}
	endpointStatPrimaryKeyColumns     = []string{"time", "endpoint_id"}
	endpointStatGeneratedColumns      = []string{}
)

type (
	// EndpointStatSlice is an alias for a slice of pointers to EndpointStat.
	// This should almost always be used instead of []EndpointStat.
	EndpointStatSlice []*EndpointStat
	// EndpointStatHook is the signature for custom EndpointStat hook methods
	EndpointStatHook func(context.Context, boil.ContextExecutor, *EndpointStat) error

	endpointStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	endpointStatType                 = reflect.TypeOf(&EndpointStat{})
	endpointStatMapping              = queries.MakeStructMapping(endpointStatType)
	endpointStatPrimaryKeyMapping, _ = queries.BindMapping(endpointStatType, endpointStatMapping, endpointStatPrimaryKeyColumns)
	endpointStatInsertCacheMut       sync.RWMutex
	endpointStatInsertCache          = make(map[string]insertCache)
	endpointStatUpdateCacheMut       sync.RWMutex
	endpointStatUpdateCache          = make(map[string]updateCache)
	endpointStatUpsertCacheMut       sync.RWMutex
	endpointStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var endpointStatAfterSelectHooks []EndpointStatHook

var endpointStatBeforeInsertHooks []EndpointStatHook
var endpointStatAfterInsertHooks []EndpointStatHook

var endpointStatBeforeUpdateHooks []EndpointStatHook
var endpointStatAfterUpdateHooks []EndpointStatHook

var endpointStatBeforeDeleteHooks []EndpointStatHook
var endpointStatAfterDeleteHooks []EndpointStatHook

var endpointStatBeforeUpsertHooks []EndpointStatHook
var endpointStatAfterUpsertHooks []EndpointStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EndpointStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endpointStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EndpointStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endpointStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EndpointStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endpointStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EndpointStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endpointStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EndpointStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endpointStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EndpointStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endpointStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EndpointStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endpointStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EndpointStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endpointStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EndpointStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endpointStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEndpointStatHook registers your hook function for all future operations.
func AddEndpointStatHook(hookPoint boil.HookPoint, endpointStatHook EndpointStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		endpointStatAfterSelectHooks = append(endpointStatAfterSelectHooks, endpointStatHook)
	case boil.BeforeInsertHook:
		endpointStatBeforeInsertHooks = append(endpointStatBeforeInsertHooks, endpointStatHook)
	case boil.AfterInsertHook:
		endpointStatAfterInsertHooks = append(endpointStatAfterInsertHooks, endpointStatHook)
	case boil.BeforeUpdateHook:
		endpointStatBeforeUpdateHooks = append(endpointStatBeforeUpdateHooks, endpointStatHook)
	case boil.AfterUpdateHook:
		endpointStatAfterUpdateHooks = append(endpointStatAfterUpdateHooks, endpointStatHook)
	case boil.BeforeDeleteHook:
		endpointStatBeforeDeleteHooks = append(endpointStatBeforeDeleteHooks, endpointStatHook)
	case boil.AfterDeleteHook:
		endpointStatAfterDeleteHooks = append(endpointStatAfterDeleteHooks, endpointStatHook)
	case boil.BeforeUpsertHook:
		endpointStatBeforeUpsertHooks = append(endpointStatBeforeUpsertHooks, endpointStatHook)
	case boil.AfterUpsertHook:
		endpointStatAfterUpsertHooks = append(endpointStatAfterUpsertHooks, endpointStatHook)
	}
}

// One returns a single endpointStat record from the query.
func (q endpointStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EndpointStat, error) {
	o := &EndpointStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for endpoint_stats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EndpointStat records from the query.
func (q endpointStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (EndpointStatSlice, error) {
	var o []*EndpointStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EndpointStat slice")
	}

	if len(endpointStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EndpointStat records in the query.
func (q endpointStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count endpoint_stats rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q endpointStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if endpoint_stats exists")
	}

	return count > 0, nil
}

// Datacenter pointed to by the foreign key.
func (o *EndpointStat) Datacenter(mods ...qm.QueryMod) datacenterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DatacenterID),
	}

	queryMods = append(queryMods, mods...)

	return Datacenters(queryMods...)
}

// Endpoint pointed to by the foreign key.
func (o *EndpointStat) Endpoint(mods ...qm.QueryMod) endpointQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EndpointID),
	}

	queryMods = append(queryMods, mods...)

	return Endpoints(queryMods...)
}

// LoadDatacenter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (endpointStatL) LoadDatacenter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEndpointStat interface{}, mods queries.Applicator) error {
	var slice []*EndpointStat
	var object *EndpointStat

	if singular {
		var ok bool
		object, ok = maybeEndpointStat.(*EndpointStat)
		if !ok {
			object = new(EndpointStat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEndpointStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEndpointStat))
			}
		}
	} else {
		s, ok := maybeEndpointStat.(*[]*EndpointStat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEndpointStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEndpointStat))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &endpointStatR{}
		}
		args = append(args, object.DatacenterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &endpointStatR{}
			}

			for _, a := range args {
				if a == obj.DatacenterID {
					continue Outer
				}
			}

			args = append(args, obj.DatacenterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`datacenters`),
		qm.WhereIn(`datacenters.id in ?`, args...),
		qmhelper.WhereIsNull(`datacenters.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Datacenter")
	}

	var resultSlice []*Datacenter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Datacenter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for datacenters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for datacenters")
	}

	if len(datacenterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Datacenter = foreign
		if foreign.R == nil {
			foreign.R = &datacenterR{}
		}
		foreign.R.EndpointStats = append(foreign.R.EndpointStats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DatacenterID == foreign.ID {
				local.R.Datacenter = foreign
				if foreign.R == nil {
					foreign.R = &datacenterR{}
				}
				foreign.R.EndpointStats = append(foreign.R.EndpointStats, local)
				break
			}
		}
	}

	return nil
}

// LoadEndpoint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (endpointStatL) LoadEndpoint(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEndpointStat interface{}, mods queries.Applicator) error {
	var slice []*EndpointStat
	var object *EndpointStat

	if singular {
		var ok bool
		object, ok = maybeEndpointStat.(*EndpointStat)
		if !ok {
			object = new(EndpointStat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEndpointStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEndpointStat))
			}
		}
	} else {
		s, ok := maybeEndpointStat.(*[]*EndpointStat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEndpointStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEndpointStat))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &endpointStatR{}
		}
		args = append(args, object.EndpointID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &endpointStatR{}
			}

			for _, a := range args {
				if a == obj.EndpointID {
					continue Outer
				}
			}

			args = append(args, obj.EndpointID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`endpoints`),
		qm.WhereIn(`endpoints.id in ?`, args...),
		qmhelper.WhereIsNull(`endpoints.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Endpoint")
	}

	var resultSlice []*Endpoint
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Endpoint")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for endpoints")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for endpoints")
	}

	if len(endpointAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Endpoint = foreign
		if foreign.R == nil {
			foreign.R = &endpointR{}
		}
		foreign.R.EndpointStats = append(foreign.R.EndpointStats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EndpointID == foreign.ID {
				local.R.Endpoint = foreign
				if foreign.R == nil {
					foreign.R = &endpointR{}
				}
				foreign.R.EndpointStats = append(foreign.R.EndpointStats, local)
				break
			}
		}
	}

	return nil
}

// SetDatacenter of the endpointStat to the related item.
// Sets o.R.Datacenter to related.
// Adds o to related.R.EndpointStats.
func (o *EndpointStat) SetDatacenter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Datacenter) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"endpoint_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"datacenter_id"}),
		strmangle.WhereClause("\"", "\"", 2, endpointStatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Time, o.EndpointID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DatacenterID = related.ID
	if o.R == nil {
		o.R = &endpointStatR{
			Datacenter: related,
		}
	} else {
		o.R.Datacenter = related
	}

	if related.R == nil {
		related.R = &datacenterR{
			EndpointStats: EndpointStatSlice{o},
		}
	} else {
		related.R.EndpointStats = append(related.R.EndpointStats, o)
	}

	return nil
}

// SetEndpoint of the endpointStat to the related item.
// Sets o.R.Endpoint to related.
// Adds o to related.R.EndpointStats.
func (o *EndpointStat) SetEndpoint(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Endpoint) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"endpoint_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"endpoint_id"}),
		strmangle.WhereClause("\"", "\"", 2, endpointStatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Time, o.EndpointID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EndpointID = related.ID
	if o.R == nil {
		o.R = &endpointStatR{
			Endpoint: related,
		}
	} else {
		o.R.Endpoint = related
	}

	if related.R == nil {
		related.R = &endpointR{
			EndpointStats: EndpointStatSlice{o},
		}
	} else {
		related.R.EndpointStats = append(related.R.EndpointStats, o)
	}

	return nil
}

// EndpointStats retrieves all the records using an executor.
func EndpointStats(mods ...qm.QueryMod) endpointStatQuery {
	mods = append(mods, qm.From("\"endpoint_stats\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"endpoint_stats\".*"})
	}

	return endpointStatQuery{q}
}

// FindEndpointStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEndpointStat(ctx context.Context, exec boil.ContextExecutor, time time.Time, endpointID int, selectCols ...string) (*EndpointStat, error) {
	endpointStatObj := &EndpointStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"endpoint_stats\" where \"time\"=$1 AND \"endpoint_id\"=$2", sel,
	)

	q := queries.Raw(query, time, endpointID)

	err := q.Bind(ctx, exec, endpointStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from endpoint_stats")
	}

	if err = endpointStatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return endpointStatObj, err
	}

	return endpointStatObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EndpointStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no endpoint_stats provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(endpointStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	endpointStatInsertCacheMut.RLock()
	cache, cached := endpointStatInsertCache[key]
	endpointStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			endpointStatAllColumns,
			endpointStatColumnsWithDefault,
			endpointStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(endpointStatType, endpointStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(endpointStatType, endpointStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"endpoint_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"endpoint_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into endpoint_stats")
	}

	if !cached {
		endpointStatInsertCacheMut.Lock()
		endpointStatInsertCache[key] = cache
		endpointStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EndpointStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EndpointStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	endpointStatUpdateCacheMut.RLock()
	cache, cached := endpointStatUpdateCache[key]
	endpointStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			endpointStatAllColumns,
			endpointStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update endpoint_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"endpoint_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, endpointStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(endpointStatType, endpointStatMapping, append(wl, endpointStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update endpoint_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for endpoint_stats")
	}

	if !cached {
		endpointStatUpdateCacheMut.Lock()
		endpointStatUpdateCache[key] = cache
		endpointStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q endpointStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for endpoint_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for endpoint_stats")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EndpointStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), endpointStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"endpoint_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, endpointStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in endpointStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all endpointStat")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EndpointStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no endpoint_stats provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(endpointStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	endpointStatUpsertCacheMut.RLock()
	cache, cached := endpointStatUpsertCache[key]
	endpointStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			endpointStatAllColumns,
			endpointStatColumnsWithDefault,
			endpointStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			endpointStatAllColumns,
			endpointStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert endpoint_stats, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(endpointStatPrimaryKeyColumns))
			copy(conflict, endpointStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"endpoint_stats\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(endpointStatType, endpointStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(endpointStatType, endpointStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert endpoint_stats")
	}

	if !cached {
		endpointStatUpsertCacheMut.Lock()
		endpointStatUpsertCache[key] = cache
		endpointStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EndpointStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EndpointStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EndpointStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), endpointStatPrimaryKeyMapping)
	sql := "DELETE FROM \"endpoint_stats\" WHERE \"time\"=$1 AND \"endpoint_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from endpoint_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for endpoint_stats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q endpointStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no endpointStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from endpoint_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for endpoint_stats")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EndpointStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(endpointStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), endpointStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"endpoint_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, endpointStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from endpointStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for endpoint_stats")
	}

	if len(endpointStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EndpointStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEndpointStat(ctx, exec, o.Time, o.EndpointID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EndpointStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EndpointStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), endpointStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"endpoint_stats\".* FROM \"endpoint_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, endpointStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EndpointStatSlice")
	}

	*o = slice

	return nil
}

// EndpointStatExists checks if the EndpointStat row exists.
func EndpointStatExists(ctx context.Context, exec boil.ContextExecutor, time time.Time, endpointID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"endpoint_stats\" where \"time\"=$1 AND \"endpoint_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time, endpointID)
	}
	row := exec.QueryRowContext(ctx, sql, time, endpointID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if endpoint_stats exists")
	}

	return exists, nil
}

// Exists checks if the EndpointStat row exists.
func (o *EndpointStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EndpointStatExists(ctx, exec, o.Time, o.EndpointID)
}
