// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TraceRoutesStat is an object representing the database table.
type TraceRoutesStat struct {
	Time         time.Time   `boil:"time" json:"time" toml:"time" yaml:"time"`
	SessionID    string      `boil:"session_id" json:"session_id" toml:"session_id" yaml:"session_id"`
	ProjectID    int         `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	TracerouteID int         `boil:"traceroute_id" json:"traceroute_id" toml:"traceroute_id" yaml:"traceroute_id"`
	URL          null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	DatacenterID int         `boil:"datacenter_id" json:"datacenter_id" toml:"datacenter_id" yaml:"datacenter_id"`
	IsHeartBeat  bool        `boil:"is_heart_beat" json:"is_heart_beat" toml:"is_heart_beat" yaml:"is_heart_beat"`
	Success      int         `boil:"success" json:"success" toml:"success" yaml:"success"`

	R *traceRoutesStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L traceRoutesStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TraceRoutesStatColumns = struct {
	Time         string
	SessionID    string
	ProjectID    string
	TracerouteID string
	URL          string
	DatacenterID string
	IsHeartBeat  string
	Success      string
}{
	Time:         "time",
	SessionID:    "session_id",
	ProjectID:    "project_id",
	TracerouteID: "traceroute_id",
	URL:          "url",
	DatacenterID: "datacenter_id",
	IsHeartBeat:  "is_heart_beat",
	Success:      "success",
}

var TraceRoutesStatTableColumns = struct {
	Time         string
	SessionID    string
	ProjectID    string
	TracerouteID string
	URL          string
	DatacenterID string
	IsHeartBeat  string
	Success      string
}{
	Time:         "trace_routes_stats.time",
	SessionID:    "trace_routes_stats.session_id",
	ProjectID:    "trace_routes_stats.project_id",
	TracerouteID: "trace_routes_stats.traceroute_id",
	URL:          "trace_routes_stats.url",
	DatacenterID: "trace_routes_stats.datacenter_id",
	IsHeartBeat:  "trace_routes_stats.is_heart_beat",
	Success:      "trace_routes_stats.success",
}

// Generated where

var TraceRoutesStatWhere = struct {
	Time         whereHelpertime_Time
	SessionID    whereHelperstring
	ProjectID    whereHelperint
	TracerouteID whereHelperint
	URL          whereHelpernull_String
	DatacenterID whereHelperint
	IsHeartBeat  whereHelperbool
	Success      whereHelperint
}{
	Time:         whereHelpertime_Time{field: "\"trace_routes_stats\".\"time\""},
	SessionID:    whereHelperstring{field: "\"trace_routes_stats\".\"session_id\""},
	ProjectID:    whereHelperint{field: "\"trace_routes_stats\".\"project_id\""},
	TracerouteID: whereHelperint{field: "\"trace_routes_stats\".\"traceroute_id\""},
	URL:          whereHelpernull_String{field: "\"trace_routes_stats\".\"url\""},
	DatacenterID: whereHelperint{field: "\"trace_routes_stats\".\"datacenter_id\""},
	IsHeartBeat:  whereHelperbool{field: "\"trace_routes_stats\".\"is_heart_beat\""},
	Success:      whereHelperint{field: "\"trace_routes_stats\".\"success\""},
}

// TraceRoutesStatRels is where relationship names are stored.
var TraceRoutesStatRels = struct {
	Datacenter string
	Traceroute string
}{
	Datacenter: "Datacenter",
	Traceroute: "Traceroute",
}

// traceRoutesStatR is where relationships are stored.
type traceRoutesStatR struct {
	Datacenter *Datacenter `boil:"Datacenter" json:"Datacenter" toml:"Datacenter" yaml:"Datacenter"`
	Traceroute *TraceRoute `boil:"Traceroute" json:"Traceroute" toml:"Traceroute" yaml:"Traceroute"`
}

// NewStruct creates a new relationship struct
func (*traceRoutesStatR) NewStruct() *traceRoutesStatR {
	return &traceRoutesStatR{}
}

func (r *traceRoutesStatR) GetDatacenter() *Datacenter {
	if r == nil {
		return nil
	}
	return r.Datacenter
}

func (r *traceRoutesStatR) GetTraceroute() *TraceRoute {
	if r == nil {
		return nil
	}
	return r.Traceroute
}

// traceRoutesStatL is where Load methods for each relationship are stored.
type traceRoutesStatL struct{}

var (
	traceRoutesStatAllColumns            = []string{"time", "session_id", "project_id", "traceroute_id", "url", "datacenter_id", "is_heart_beat", "success"}
	traceRoutesStatColumnsWithoutDefault = []string{"time", "session_id", "project_id", "traceroute_id", "datacenter_id", "is_heart_beat", "success"}
	traceRoutesStatColumnsWithDefault    = []string{"url"}
	traceRoutesStatPrimaryKeyColumns     = []string{"time", "traceroute_id"}
	traceRoutesStatGeneratedColumns      = []string{}
)

type (
	// TraceRoutesStatSlice is an alias for a slice of pointers to TraceRoutesStat.
	// This should almost always be used instead of []TraceRoutesStat.
	TraceRoutesStatSlice []*TraceRoutesStat
	// TraceRoutesStatHook is the signature for custom TraceRoutesStat hook methods
	TraceRoutesStatHook func(context.Context, boil.ContextExecutor, *TraceRoutesStat) error

	traceRoutesStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	traceRoutesStatType                 = reflect.TypeOf(&TraceRoutesStat{})
	traceRoutesStatMapping              = queries.MakeStructMapping(traceRoutesStatType)
	traceRoutesStatPrimaryKeyMapping, _ = queries.BindMapping(traceRoutesStatType, traceRoutesStatMapping, traceRoutesStatPrimaryKeyColumns)
	traceRoutesStatInsertCacheMut       sync.RWMutex
	traceRoutesStatInsertCache          = make(map[string]insertCache)
	traceRoutesStatUpdateCacheMut       sync.RWMutex
	traceRoutesStatUpdateCache          = make(map[string]updateCache)
	traceRoutesStatUpsertCacheMut       sync.RWMutex
	traceRoutesStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var traceRoutesStatAfterSelectHooks []TraceRoutesStatHook

var traceRoutesStatBeforeInsertHooks []TraceRoutesStatHook
var traceRoutesStatAfterInsertHooks []TraceRoutesStatHook

var traceRoutesStatBeforeUpdateHooks []TraceRoutesStatHook
var traceRoutesStatAfterUpdateHooks []TraceRoutesStatHook

var traceRoutesStatBeforeDeleteHooks []TraceRoutesStatHook
var traceRoutesStatAfterDeleteHooks []TraceRoutesStatHook

var traceRoutesStatBeforeUpsertHooks []TraceRoutesStatHook
var traceRoutesStatAfterUpsertHooks []TraceRoutesStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TraceRoutesStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range traceRoutesStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TraceRoutesStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range traceRoutesStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TraceRoutesStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range traceRoutesStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TraceRoutesStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range traceRoutesStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TraceRoutesStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range traceRoutesStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TraceRoutesStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range traceRoutesStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TraceRoutesStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range traceRoutesStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TraceRoutesStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range traceRoutesStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TraceRoutesStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range traceRoutesStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTraceRoutesStatHook registers your hook function for all future operations.
func AddTraceRoutesStatHook(hookPoint boil.HookPoint, traceRoutesStatHook TraceRoutesStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		traceRoutesStatAfterSelectHooks = append(traceRoutesStatAfterSelectHooks, traceRoutesStatHook)
	case boil.BeforeInsertHook:
		traceRoutesStatBeforeInsertHooks = append(traceRoutesStatBeforeInsertHooks, traceRoutesStatHook)
	case boil.AfterInsertHook:
		traceRoutesStatAfterInsertHooks = append(traceRoutesStatAfterInsertHooks, traceRoutesStatHook)
	case boil.BeforeUpdateHook:
		traceRoutesStatBeforeUpdateHooks = append(traceRoutesStatBeforeUpdateHooks, traceRoutesStatHook)
	case boil.AfterUpdateHook:
		traceRoutesStatAfterUpdateHooks = append(traceRoutesStatAfterUpdateHooks, traceRoutesStatHook)
	case boil.BeforeDeleteHook:
		traceRoutesStatBeforeDeleteHooks = append(traceRoutesStatBeforeDeleteHooks, traceRoutesStatHook)
	case boil.AfterDeleteHook:
		traceRoutesStatAfterDeleteHooks = append(traceRoutesStatAfterDeleteHooks, traceRoutesStatHook)
	case boil.BeforeUpsertHook:
		traceRoutesStatBeforeUpsertHooks = append(traceRoutesStatBeforeUpsertHooks, traceRoutesStatHook)
	case boil.AfterUpsertHook:
		traceRoutesStatAfterUpsertHooks = append(traceRoutesStatAfterUpsertHooks, traceRoutesStatHook)
	}
}

// One returns a single traceRoutesStat record from the query.
func (q traceRoutesStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TraceRoutesStat, error) {
	o := &TraceRoutesStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trace_routes_stats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TraceRoutesStat records from the query.
func (q traceRoutesStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (TraceRoutesStatSlice, error) {
	var o []*TraceRoutesStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TraceRoutesStat slice")
	}

	if len(traceRoutesStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TraceRoutesStat records in the query.
func (q traceRoutesStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trace_routes_stats rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q traceRoutesStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trace_routes_stats exists")
	}

	return count > 0, nil
}

// Datacenter pointed to by the foreign key.
func (o *TraceRoutesStat) Datacenter(mods ...qm.QueryMod) datacenterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DatacenterID),
	}

	queryMods = append(queryMods, mods...)

	return Datacenters(queryMods...)
}

// Traceroute pointed to by the foreign key.
func (o *TraceRoutesStat) Traceroute(mods ...qm.QueryMod) traceRouteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TracerouteID),
	}

	queryMods = append(queryMods, mods...)

	return TraceRoutes(queryMods...)
}

// LoadDatacenter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (traceRoutesStatL) LoadDatacenter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTraceRoutesStat interface{}, mods queries.Applicator) error {
	var slice []*TraceRoutesStat
	var object *TraceRoutesStat

	if singular {
		var ok bool
		object, ok = maybeTraceRoutesStat.(*TraceRoutesStat)
		if !ok {
			object = new(TraceRoutesStat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTraceRoutesStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTraceRoutesStat))
			}
		}
	} else {
		s, ok := maybeTraceRoutesStat.(*[]*TraceRoutesStat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTraceRoutesStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTraceRoutesStat))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &traceRoutesStatR{}
		}
		args = append(args, object.DatacenterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &traceRoutesStatR{}
			}

			for _, a := range args {
				if a == obj.DatacenterID {
					continue Outer
				}
			}

			args = append(args, obj.DatacenterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`datacenters`),
		qm.WhereIn(`datacenters.id in ?`, args...),
		qmhelper.WhereIsNull(`datacenters.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Datacenter")
	}

	var resultSlice []*Datacenter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Datacenter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for datacenters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for datacenters")
	}

	if len(datacenterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Datacenter = foreign
		if foreign.R == nil {
			foreign.R = &datacenterR{}
		}
		foreign.R.TraceRoutesStats = append(foreign.R.TraceRoutesStats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DatacenterID == foreign.ID {
				local.R.Datacenter = foreign
				if foreign.R == nil {
					foreign.R = &datacenterR{}
				}
				foreign.R.TraceRoutesStats = append(foreign.R.TraceRoutesStats, local)
				break
			}
		}
	}

	return nil
}

// LoadTraceroute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (traceRoutesStatL) LoadTraceroute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTraceRoutesStat interface{}, mods queries.Applicator) error {
	var slice []*TraceRoutesStat
	var object *TraceRoutesStat

	if singular {
		var ok bool
		object, ok = maybeTraceRoutesStat.(*TraceRoutesStat)
		if !ok {
			object = new(TraceRoutesStat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTraceRoutesStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTraceRoutesStat))
			}
		}
	} else {
		s, ok := maybeTraceRoutesStat.(*[]*TraceRoutesStat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTraceRoutesStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTraceRoutesStat))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &traceRoutesStatR{}
		}
		args = append(args, object.TracerouteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &traceRoutesStatR{}
			}

			for _, a := range args {
				if a == obj.TracerouteID {
					continue Outer
				}
			}

			args = append(args, obj.TracerouteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`trace_routes`),
		qm.WhereIn(`trace_routes.id in ?`, args...),
		qmhelper.WhereIsNull(`trace_routes.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TraceRoute")
	}

	var resultSlice []*TraceRoute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TraceRoute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trace_routes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trace_routes")
	}

	if len(traceRouteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Traceroute = foreign
		if foreign.R == nil {
			foreign.R = &traceRouteR{}
		}
		foreign.R.TracerouteTraceRoutesStats = append(foreign.R.TracerouteTraceRoutesStats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TracerouteID == foreign.ID {
				local.R.Traceroute = foreign
				if foreign.R == nil {
					foreign.R = &traceRouteR{}
				}
				foreign.R.TracerouteTraceRoutesStats = append(foreign.R.TracerouteTraceRoutesStats, local)
				break
			}
		}
	}

	return nil
}

// SetDatacenter of the traceRoutesStat to the related item.
// Sets o.R.Datacenter to related.
// Adds o to related.R.TraceRoutesStats.
func (o *TraceRoutesStat) SetDatacenter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Datacenter) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trace_routes_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"datacenter_id"}),
		strmangle.WhereClause("\"", "\"", 2, traceRoutesStatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Time, o.TracerouteID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DatacenterID = related.ID
	if o.R == nil {
		o.R = &traceRoutesStatR{
			Datacenter: related,
		}
	} else {
		o.R.Datacenter = related
	}

	if related.R == nil {
		related.R = &datacenterR{
			TraceRoutesStats: TraceRoutesStatSlice{o},
		}
	} else {
		related.R.TraceRoutesStats = append(related.R.TraceRoutesStats, o)
	}

	return nil
}

// SetTraceroute of the traceRoutesStat to the related item.
// Sets o.R.Traceroute to related.
// Adds o to related.R.TracerouteTraceRoutesStats.
func (o *TraceRoutesStat) SetTraceroute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TraceRoute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trace_routes_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"traceroute_id"}),
		strmangle.WhereClause("\"", "\"", 2, traceRoutesStatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Time, o.TracerouteID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TracerouteID = related.ID
	if o.R == nil {
		o.R = &traceRoutesStatR{
			Traceroute: related,
		}
	} else {
		o.R.Traceroute = related
	}

	if related.R == nil {
		related.R = &traceRouteR{
			TracerouteTraceRoutesStats: TraceRoutesStatSlice{o},
		}
	} else {
		related.R.TracerouteTraceRoutesStats = append(related.R.TracerouteTraceRoutesStats, o)
	}

	return nil
}

// TraceRoutesStats retrieves all the records using an executor.
func TraceRoutesStats(mods ...qm.QueryMod) traceRoutesStatQuery {
	mods = append(mods, qm.From("\"trace_routes_stats\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"trace_routes_stats\".*"})
	}

	return traceRoutesStatQuery{q}
}

// FindTraceRoutesStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTraceRoutesStat(ctx context.Context, exec boil.ContextExecutor, time time.Time, tracerouteID int, selectCols ...string) (*TraceRoutesStat, error) {
	traceRoutesStatObj := &TraceRoutesStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trace_routes_stats\" where \"time\"=$1 AND \"traceroute_id\"=$2", sel,
	)

	q := queries.Raw(query, time, tracerouteID)

	err := q.Bind(ctx, exec, traceRoutesStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trace_routes_stats")
	}

	if err = traceRoutesStatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return traceRoutesStatObj, err
	}

	return traceRoutesStatObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TraceRoutesStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trace_routes_stats provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(traceRoutesStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	traceRoutesStatInsertCacheMut.RLock()
	cache, cached := traceRoutesStatInsertCache[key]
	traceRoutesStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			traceRoutesStatAllColumns,
			traceRoutesStatColumnsWithDefault,
			traceRoutesStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(traceRoutesStatType, traceRoutesStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(traceRoutesStatType, traceRoutesStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trace_routes_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trace_routes_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trace_routes_stats")
	}

	if !cached {
		traceRoutesStatInsertCacheMut.Lock()
		traceRoutesStatInsertCache[key] = cache
		traceRoutesStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TraceRoutesStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TraceRoutesStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	traceRoutesStatUpdateCacheMut.RLock()
	cache, cached := traceRoutesStatUpdateCache[key]
	traceRoutesStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			traceRoutesStatAllColumns,
			traceRoutesStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update trace_routes_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trace_routes_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, traceRoutesStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(traceRoutesStatType, traceRoutesStatMapping, append(wl, traceRoutesStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update trace_routes_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for trace_routes_stats")
	}

	if !cached {
		traceRoutesStatUpdateCacheMut.Lock()
		traceRoutesStatUpdateCache[key] = cache
		traceRoutesStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q traceRoutesStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for trace_routes_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for trace_routes_stats")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TraceRoutesStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), traceRoutesStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trace_routes_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, traceRoutesStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in traceRoutesStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all traceRoutesStat")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TraceRoutesStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trace_routes_stats provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(traceRoutesStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	traceRoutesStatUpsertCacheMut.RLock()
	cache, cached := traceRoutesStatUpsertCache[key]
	traceRoutesStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			traceRoutesStatAllColumns,
			traceRoutesStatColumnsWithDefault,
			traceRoutesStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			traceRoutesStatAllColumns,
			traceRoutesStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert trace_routes_stats, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(traceRoutesStatPrimaryKeyColumns))
			copy(conflict, traceRoutesStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"trace_routes_stats\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(traceRoutesStatType, traceRoutesStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(traceRoutesStatType, traceRoutesStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert trace_routes_stats")
	}

	if !cached {
		traceRoutesStatUpsertCacheMut.Lock()
		traceRoutesStatUpsertCache[key] = cache
		traceRoutesStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TraceRoutesStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TraceRoutesStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TraceRoutesStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), traceRoutesStatPrimaryKeyMapping)
	sql := "DELETE FROM \"trace_routes_stats\" WHERE \"time\"=$1 AND \"traceroute_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from trace_routes_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for trace_routes_stats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q traceRoutesStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no traceRoutesStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trace_routes_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trace_routes_stats")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TraceRoutesStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(traceRoutesStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), traceRoutesStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trace_routes_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, traceRoutesStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from traceRoutesStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trace_routes_stats")
	}

	if len(traceRoutesStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TraceRoutesStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTraceRoutesStat(ctx, exec, o.Time, o.TracerouteID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TraceRoutesStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TraceRoutesStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), traceRoutesStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trace_routes_stats\".* FROM \"trace_routes_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, traceRoutesStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TraceRoutesStatSlice")
	}

	*o = slice

	return nil
}

// TraceRoutesStatExists checks if the TraceRoutesStat row exists.
func TraceRoutesStatExists(ctx context.Context, exec boil.ContextExecutor, time time.Time, tracerouteID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trace_routes_stats\" where \"time\"=$1 AND \"traceroute_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time, tracerouteID)
	}
	row := exec.QueryRowContext(ctx, sql, time, tracerouteID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trace_routes_stats exists")
	}

	return exists, nil
}

// Exists checks if the TraceRoutesStat row exists.
func (o *TraceRoutesStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TraceRoutesStatExists(ctx, exec, o.Time, o.TracerouteID)
}
