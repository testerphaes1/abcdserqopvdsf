// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RelationDatacenter is an object representing the database table.
type RelationDatacenter struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	EndpointID   null.Int  `boil:"endpoint_id" json:"endpoint_id,omitempty" toml:"endpoint_id" yaml:"endpoint_id,omitempty"`
	DatacenterID null.Int  `boil:"datacenter_id" json:"datacenter_id,omitempty" toml:"datacenter_id" yaml:"datacenter_id,omitempty"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *relationDatacenterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L relationDatacenterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RelationDatacenterColumns = struct {
	ID           string
	EndpointID   string
	DatacenterID string
	UpdatedAt    string
	CreatedAt    string
	DeletedAt    string
}{
	ID:           "id",
	EndpointID:   "endpoint_id",
	DatacenterID: "datacenter_id",
	UpdatedAt:    "updated_at",
	CreatedAt:    "created_at",
	DeletedAt:    "deleted_at",
}

var RelationDatacenterTableColumns = struct {
	ID           string
	EndpointID   string
	DatacenterID string
	UpdatedAt    string
	CreatedAt    string
	DeletedAt    string
}{
	ID:           "relation_datacenters.id",
	EndpointID:   "relation_datacenters.endpoint_id",
	DatacenterID: "relation_datacenters.datacenter_id",
	UpdatedAt:    "relation_datacenters.updated_at",
	CreatedAt:    "relation_datacenters.created_at",
	DeletedAt:    "relation_datacenters.deleted_at",
}

// Generated where

var RelationDatacenterWhere = struct {
	ID           whereHelperint
	EndpointID   whereHelpernull_Int
	DatacenterID whereHelpernull_Int
	UpdatedAt    whereHelpertime_Time
	CreatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
}{
	ID:           whereHelperint{field: "\"relation_datacenters\".\"id\""},
	EndpointID:   whereHelpernull_Int{field: "\"relation_datacenters\".\"endpoint_id\""},
	DatacenterID: whereHelpernull_Int{field: "\"relation_datacenters\".\"datacenter_id\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"relation_datacenters\".\"updated_at\""},
	CreatedAt:    whereHelpertime_Time{field: "\"relation_datacenters\".\"created_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"relation_datacenters\".\"deleted_at\""},
}

// RelationDatacenterRels is where relationship names are stored.
var RelationDatacenterRels = struct {
	Datacenter string
	Endpoint   string
}{
	Datacenter: "Datacenter",
	Endpoint:   "Endpoint",
}

// relationDatacenterR is where relationships are stored.
type relationDatacenterR struct {
	Datacenter *Datacenter `boil:"Datacenter" json:"Datacenter" toml:"Datacenter" yaml:"Datacenter"`
	Endpoint   *Endpoint   `boil:"Endpoint" json:"Endpoint" toml:"Endpoint" yaml:"Endpoint"`
}

// NewStruct creates a new relationship struct
func (*relationDatacenterR) NewStruct() *relationDatacenterR {
	return &relationDatacenterR{}
}

func (r *relationDatacenterR) GetDatacenter() *Datacenter {
	if r == nil {
		return nil
	}
	return r.Datacenter
}

func (r *relationDatacenterR) GetEndpoint() *Endpoint {
	if r == nil {
		return nil
	}
	return r.Endpoint
}

// relationDatacenterL is where Load methods for each relationship are stored.
type relationDatacenterL struct{}

var (
	relationDatacenterAllColumns            = []string{"id", "endpoint_id", "datacenter_id", "updated_at", "created_at", "deleted_at"}
	relationDatacenterColumnsWithoutDefault = []string{"created_at"}
	relationDatacenterColumnsWithDefault    = []string{"id", "endpoint_id", "datacenter_id", "updated_at", "deleted_at"}
	relationDatacenterPrimaryKeyColumns     = []string{"id"}
	relationDatacenterGeneratedColumns      = []string{}
)

type (
	// RelationDatacenterSlice is an alias for a slice of pointers to RelationDatacenter.
	// This should almost always be used instead of []RelationDatacenter.
	RelationDatacenterSlice []*RelationDatacenter
	// RelationDatacenterHook is the signature for custom RelationDatacenter hook methods
	RelationDatacenterHook func(context.Context, boil.ContextExecutor, *RelationDatacenter) error

	relationDatacenterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	relationDatacenterType                 = reflect.TypeOf(&RelationDatacenter{})
	relationDatacenterMapping              = queries.MakeStructMapping(relationDatacenterType)
	relationDatacenterPrimaryKeyMapping, _ = queries.BindMapping(relationDatacenterType, relationDatacenterMapping, relationDatacenterPrimaryKeyColumns)
	relationDatacenterInsertCacheMut       sync.RWMutex
	relationDatacenterInsertCache          = make(map[string]insertCache)
	relationDatacenterUpdateCacheMut       sync.RWMutex
	relationDatacenterUpdateCache          = make(map[string]updateCache)
	relationDatacenterUpsertCacheMut       sync.RWMutex
	relationDatacenterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var relationDatacenterAfterSelectHooks []RelationDatacenterHook

var relationDatacenterBeforeInsertHooks []RelationDatacenterHook
var relationDatacenterAfterInsertHooks []RelationDatacenterHook

var relationDatacenterBeforeUpdateHooks []RelationDatacenterHook
var relationDatacenterAfterUpdateHooks []RelationDatacenterHook

var relationDatacenterBeforeDeleteHooks []RelationDatacenterHook
var relationDatacenterAfterDeleteHooks []RelationDatacenterHook

var relationDatacenterBeforeUpsertHooks []RelationDatacenterHook
var relationDatacenterAfterUpsertHooks []RelationDatacenterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RelationDatacenter) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationDatacenterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RelationDatacenter) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationDatacenterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RelationDatacenter) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationDatacenterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RelationDatacenter) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationDatacenterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RelationDatacenter) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationDatacenterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RelationDatacenter) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationDatacenterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RelationDatacenter) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationDatacenterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RelationDatacenter) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationDatacenterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RelationDatacenter) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationDatacenterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRelationDatacenterHook registers your hook function for all future operations.
func AddRelationDatacenterHook(hookPoint boil.HookPoint, relationDatacenterHook RelationDatacenterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		relationDatacenterAfterSelectHooks = append(relationDatacenterAfterSelectHooks, relationDatacenterHook)
	case boil.BeforeInsertHook:
		relationDatacenterBeforeInsertHooks = append(relationDatacenterBeforeInsertHooks, relationDatacenterHook)
	case boil.AfterInsertHook:
		relationDatacenterAfterInsertHooks = append(relationDatacenterAfterInsertHooks, relationDatacenterHook)
	case boil.BeforeUpdateHook:
		relationDatacenterBeforeUpdateHooks = append(relationDatacenterBeforeUpdateHooks, relationDatacenterHook)
	case boil.AfterUpdateHook:
		relationDatacenterAfterUpdateHooks = append(relationDatacenterAfterUpdateHooks, relationDatacenterHook)
	case boil.BeforeDeleteHook:
		relationDatacenterBeforeDeleteHooks = append(relationDatacenterBeforeDeleteHooks, relationDatacenterHook)
	case boil.AfterDeleteHook:
		relationDatacenterAfterDeleteHooks = append(relationDatacenterAfterDeleteHooks, relationDatacenterHook)
	case boil.BeforeUpsertHook:
		relationDatacenterBeforeUpsertHooks = append(relationDatacenterBeforeUpsertHooks, relationDatacenterHook)
	case boil.AfterUpsertHook:
		relationDatacenterAfterUpsertHooks = append(relationDatacenterAfterUpsertHooks, relationDatacenterHook)
	}
}

// One returns a single relationDatacenter record from the query.
func (q relationDatacenterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RelationDatacenter, error) {
	o := &RelationDatacenter{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for relation_datacenters")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RelationDatacenter records from the query.
func (q relationDatacenterQuery) All(ctx context.Context, exec boil.ContextExecutor) (RelationDatacenterSlice, error) {
	var o []*RelationDatacenter

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RelationDatacenter slice")
	}

	if len(relationDatacenterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RelationDatacenter records in the query.
func (q relationDatacenterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count relation_datacenters rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q relationDatacenterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if relation_datacenters exists")
	}

	return count > 0, nil
}

// Datacenter pointed to by the foreign key.
func (o *RelationDatacenter) Datacenter(mods ...qm.QueryMod) datacenterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DatacenterID),
	}

	queryMods = append(queryMods, mods...)

	return Datacenters(queryMods...)
}

// Endpoint pointed to by the foreign key.
func (o *RelationDatacenter) Endpoint(mods ...qm.QueryMod) endpointQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EndpointID),
	}

	queryMods = append(queryMods, mods...)

	return Endpoints(queryMods...)
}

// LoadDatacenter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (relationDatacenterL) LoadDatacenter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRelationDatacenter interface{}, mods queries.Applicator) error {
	var slice []*RelationDatacenter
	var object *RelationDatacenter

	if singular {
		var ok bool
		object, ok = maybeRelationDatacenter.(*RelationDatacenter)
		if !ok {
			object = new(RelationDatacenter)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRelationDatacenter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRelationDatacenter))
			}
		}
	} else {
		s, ok := maybeRelationDatacenter.(*[]*RelationDatacenter)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRelationDatacenter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRelationDatacenter))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &relationDatacenterR{}
		}
		if !queries.IsNil(object.DatacenterID) {
			args = append(args, object.DatacenterID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &relationDatacenterR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DatacenterID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DatacenterID) {
				args = append(args, obj.DatacenterID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`datacenters`),
		qm.WhereIn(`datacenters.id in ?`, args...),
		qmhelper.WhereIsNull(`datacenters.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Datacenter")
	}

	var resultSlice []*Datacenter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Datacenter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for datacenters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for datacenters")
	}

	if len(datacenterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Datacenter = foreign
		if foreign.R == nil {
			foreign.R = &datacenterR{}
		}
		foreign.R.RelationDatacenters = append(foreign.R.RelationDatacenters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DatacenterID, foreign.ID) {
				local.R.Datacenter = foreign
				if foreign.R == nil {
					foreign.R = &datacenterR{}
				}
				foreign.R.RelationDatacenters = append(foreign.R.RelationDatacenters, local)
				break
			}
		}
	}

	return nil
}

// LoadEndpoint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (relationDatacenterL) LoadEndpoint(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRelationDatacenter interface{}, mods queries.Applicator) error {
	var slice []*RelationDatacenter
	var object *RelationDatacenter

	if singular {
		var ok bool
		object, ok = maybeRelationDatacenter.(*RelationDatacenter)
		if !ok {
			object = new(RelationDatacenter)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRelationDatacenter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRelationDatacenter))
			}
		}
	} else {
		s, ok := maybeRelationDatacenter.(*[]*RelationDatacenter)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRelationDatacenter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRelationDatacenter))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &relationDatacenterR{}
		}
		if !queries.IsNil(object.EndpointID) {
			args = append(args, object.EndpointID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &relationDatacenterR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EndpointID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EndpointID) {
				args = append(args, obj.EndpointID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`endpoints`),
		qm.WhereIn(`endpoints.id in ?`, args...),
		qmhelper.WhereIsNull(`endpoints.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Endpoint")
	}

	var resultSlice []*Endpoint
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Endpoint")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for endpoints")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for endpoints")
	}

	if len(endpointAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Endpoint = foreign
		if foreign.R == nil {
			foreign.R = &endpointR{}
		}
		foreign.R.RelationDatacenters = append(foreign.R.RelationDatacenters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EndpointID, foreign.ID) {
				local.R.Endpoint = foreign
				if foreign.R == nil {
					foreign.R = &endpointR{}
				}
				foreign.R.RelationDatacenters = append(foreign.R.RelationDatacenters, local)
				break
			}
		}
	}

	return nil
}

// SetDatacenter of the relationDatacenter to the related item.
// Sets o.R.Datacenter to related.
// Adds o to related.R.RelationDatacenters.
func (o *RelationDatacenter) SetDatacenter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Datacenter) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"relation_datacenters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"datacenter_id"}),
		strmangle.WhereClause("\"", "\"", 2, relationDatacenterPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DatacenterID, related.ID)
	if o.R == nil {
		o.R = &relationDatacenterR{
			Datacenter: related,
		}
	} else {
		o.R.Datacenter = related
	}

	if related.R == nil {
		related.R = &datacenterR{
			RelationDatacenters: RelationDatacenterSlice{o},
		}
	} else {
		related.R.RelationDatacenters = append(related.R.RelationDatacenters, o)
	}

	return nil
}

// RemoveDatacenter relationship.
// Sets o.R.Datacenter to nil.
// Removes o from all passed in related items' relationships struct.
func (o *RelationDatacenter) RemoveDatacenter(ctx context.Context, exec boil.ContextExecutor, related *Datacenter) error {
	var err error

	queries.SetScanner(&o.DatacenterID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("datacenter_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Datacenter = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RelationDatacenters {
		if queries.Equal(o.DatacenterID, ri.DatacenterID) {
			continue
		}

		ln := len(related.R.RelationDatacenters)
		if ln > 1 && i < ln-1 {
			related.R.RelationDatacenters[i] = related.R.RelationDatacenters[ln-1]
		}
		related.R.RelationDatacenters = related.R.RelationDatacenters[:ln-1]
		break
	}
	return nil
}

// SetEndpoint of the relationDatacenter to the related item.
// Sets o.R.Endpoint to related.
// Adds o to related.R.RelationDatacenters.
func (o *RelationDatacenter) SetEndpoint(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Endpoint) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"relation_datacenters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"endpoint_id"}),
		strmangle.WhereClause("\"", "\"", 2, relationDatacenterPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EndpointID, related.ID)
	if o.R == nil {
		o.R = &relationDatacenterR{
			Endpoint: related,
		}
	} else {
		o.R.Endpoint = related
	}

	if related.R == nil {
		related.R = &endpointR{
			RelationDatacenters: RelationDatacenterSlice{o},
		}
	} else {
		related.R.RelationDatacenters = append(related.R.RelationDatacenters, o)
	}

	return nil
}

// RemoveEndpoint relationship.
// Sets o.R.Endpoint to nil.
// Removes o from all passed in related items' relationships struct.
func (o *RelationDatacenter) RemoveEndpoint(ctx context.Context, exec boil.ContextExecutor, related *Endpoint) error {
	var err error

	queries.SetScanner(&o.EndpointID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("endpoint_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Endpoint = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RelationDatacenters {
		if queries.Equal(o.EndpointID, ri.EndpointID) {
			continue
		}

		ln := len(related.R.RelationDatacenters)
		if ln > 1 && i < ln-1 {
			related.R.RelationDatacenters[i] = related.R.RelationDatacenters[ln-1]
		}
		related.R.RelationDatacenters = related.R.RelationDatacenters[:ln-1]
		break
	}
	return nil
}

// RelationDatacenters retrieves all the records using an executor.
func RelationDatacenters(mods ...qm.QueryMod) relationDatacenterQuery {
	mods = append(mods, qm.From("\"relation_datacenters\""), qmhelper.WhereIsNull("\"relation_datacenters\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"relation_datacenters\".*"})
	}

	return relationDatacenterQuery{q}
}

// FindRelationDatacenter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRelationDatacenter(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RelationDatacenter, error) {
	relationDatacenterObj := &RelationDatacenter{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"relation_datacenters\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, relationDatacenterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from relation_datacenters")
	}

	if err = relationDatacenterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return relationDatacenterObj, err
	}

	return relationDatacenterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RelationDatacenter) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no relation_datacenters provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(relationDatacenterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	relationDatacenterInsertCacheMut.RLock()
	cache, cached := relationDatacenterInsertCache[key]
	relationDatacenterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			relationDatacenterAllColumns,
			relationDatacenterColumnsWithDefault,
			relationDatacenterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(relationDatacenterType, relationDatacenterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(relationDatacenterType, relationDatacenterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"relation_datacenters\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"relation_datacenters\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into relation_datacenters")
	}

	if !cached {
		relationDatacenterInsertCacheMut.Lock()
		relationDatacenterInsertCache[key] = cache
		relationDatacenterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RelationDatacenter.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RelationDatacenter) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	relationDatacenterUpdateCacheMut.RLock()
	cache, cached := relationDatacenterUpdateCache[key]
	relationDatacenterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			relationDatacenterAllColumns,
			relationDatacenterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update relation_datacenters, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"relation_datacenters\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, relationDatacenterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(relationDatacenterType, relationDatacenterMapping, append(wl, relationDatacenterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update relation_datacenters row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for relation_datacenters")
	}

	if !cached {
		relationDatacenterUpdateCacheMut.Lock()
		relationDatacenterUpdateCache[key] = cache
		relationDatacenterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q relationDatacenterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for relation_datacenters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for relation_datacenters")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RelationDatacenterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relationDatacenterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"relation_datacenters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, relationDatacenterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in relationDatacenter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all relationDatacenter")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RelationDatacenter) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no relation_datacenters provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(relationDatacenterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	relationDatacenterUpsertCacheMut.RLock()
	cache, cached := relationDatacenterUpsertCache[key]
	relationDatacenterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			relationDatacenterAllColumns,
			relationDatacenterColumnsWithDefault,
			relationDatacenterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			relationDatacenterAllColumns,
			relationDatacenterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert relation_datacenters, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(relationDatacenterPrimaryKeyColumns))
			copy(conflict, relationDatacenterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"relation_datacenters\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(relationDatacenterType, relationDatacenterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(relationDatacenterType, relationDatacenterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert relation_datacenters")
	}

	if !cached {
		relationDatacenterUpsertCacheMut.Lock()
		relationDatacenterUpsertCache[key] = cache
		relationDatacenterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RelationDatacenter record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RelationDatacenter) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RelationDatacenter provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), relationDatacenterPrimaryKeyMapping)
		sql = "DELETE FROM \"relation_datacenters\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"relation_datacenters\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(relationDatacenterType, relationDatacenterMapping, append(wl, relationDatacenterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from relation_datacenters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for relation_datacenters")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q relationDatacenterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no relationDatacenterQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from relation_datacenters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for relation_datacenters")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RelationDatacenterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(relationDatacenterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relationDatacenterPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"relation_datacenters\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, relationDatacenterPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relationDatacenterPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"relation_datacenters\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, relationDatacenterPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from relationDatacenter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for relation_datacenters")
	}

	if len(relationDatacenterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RelationDatacenter) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRelationDatacenter(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RelationDatacenterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RelationDatacenterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relationDatacenterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"relation_datacenters\".* FROM \"relation_datacenters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, relationDatacenterPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RelationDatacenterSlice")
	}

	*o = slice

	return nil
}

// RelationDatacenterExists checks if the RelationDatacenter row exists.
func RelationDatacenterExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"relation_datacenters\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if relation_datacenters exists")
	}

	return exists, nil
}

// Exists checks if the RelationDatacenter row exists.
func (o *RelationDatacenter) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RelationDatacenterExists(ctx, exec, o.ID)
}
