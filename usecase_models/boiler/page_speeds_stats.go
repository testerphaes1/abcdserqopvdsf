// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PageSpeedsStat is an object representing the database table.
type PageSpeedsStat struct {
	Time         time.Time   `boil:"time" json:"time" toml:"time" yaml:"time"`
	SessionID    string      `boil:"session_id" json:"session_id" toml:"session_id" yaml:"session_id"`
	ProjectID    int         `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	PagespeedID  int         `boil:"pagespeed_id" json:"pagespeed_id" toml:"pagespeed_id" yaml:"pagespeed_id"`
	URL          null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	DatacenterID int         `boil:"datacenter_id" json:"datacenter_id" toml:"datacenter_id" yaml:"datacenter_id"`
	IsHeartBeat  bool        `boil:"is_heart_beat" json:"is_heart_beat" toml:"is_heart_beat" yaml:"is_heart_beat"`
	Success      int         `boil:"success" json:"success" toml:"success" yaml:"success"`

	R *pageSpeedsStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pageSpeedsStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PageSpeedsStatColumns = struct {
	Time         string
	SessionID    string
	ProjectID    string
	PagespeedID  string
	URL          string
	DatacenterID string
	IsHeartBeat  string
	Success      string
}{
	Time:         "time",
	SessionID:    "session_id",
	ProjectID:    "project_id",
	PagespeedID:  "pagespeed_id",
	URL:          "url",
	DatacenterID: "datacenter_id",
	IsHeartBeat:  "is_heart_beat",
	Success:      "success",
}

var PageSpeedsStatTableColumns = struct {
	Time         string
	SessionID    string
	ProjectID    string
	PagespeedID  string
	URL          string
	DatacenterID string
	IsHeartBeat  string
	Success      string
}{
	Time:         "page_speeds_stats.time",
	SessionID:    "page_speeds_stats.session_id",
	ProjectID:    "page_speeds_stats.project_id",
	PagespeedID:  "page_speeds_stats.pagespeed_id",
	URL:          "page_speeds_stats.url",
	DatacenterID: "page_speeds_stats.datacenter_id",
	IsHeartBeat:  "page_speeds_stats.is_heart_beat",
	Success:      "page_speeds_stats.success",
}

// Generated where

var PageSpeedsStatWhere = struct {
	Time         whereHelpertime_Time
	SessionID    whereHelperstring
	ProjectID    whereHelperint
	PagespeedID  whereHelperint
	URL          whereHelpernull_String
	DatacenterID whereHelperint
	IsHeartBeat  whereHelperbool
	Success      whereHelperint
}{
	Time:         whereHelpertime_Time{field: "\"page_speeds_stats\".\"time\""},
	SessionID:    whereHelperstring{field: "\"page_speeds_stats\".\"session_id\""},
	ProjectID:    whereHelperint{field: "\"page_speeds_stats\".\"project_id\""},
	PagespeedID:  whereHelperint{field: "\"page_speeds_stats\".\"pagespeed_id\""},
	URL:          whereHelpernull_String{field: "\"page_speeds_stats\".\"url\""},
	DatacenterID: whereHelperint{field: "\"page_speeds_stats\".\"datacenter_id\""},
	IsHeartBeat:  whereHelperbool{field: "\"page_speeds_stats\".\"is_heart_beat\""},
	Success:      whereHelperint{field: "\"page_speeds_stats\".\"success\""},
}

// PageSpeedsStatRels is where relationship names are stored.
var PageSpeedsStatRels = struct {
	Datacenter string
	Pagespeed  string
}{
	Datacenter: "Datacenter",
	Pagespeed:  "Pagespeed",
}

// pageSpeedsStatR is where relationships are stored.
type pageSpeedsStatR struct {
	Datacenter *Datacenter `boil:"Datacenter" json:"Datacenter" toml:"Datacenter" yaml:"Datacenter"`
	Pagespeed  *PageSpeed  `boil:"Pagespeed" json:"Pagespeed" toml:"Pagespeed" yaml:"Pagespeed"`
}

// NewStruct creates a new relationship struct
func (*pageSpeedsStatR) NewStruct() *pageSpeedsStatR {
	return &pageSpeedsStatR{}
}

func (r *pageSpeedsStatR) GetDatacenter() *Datacenter {
	if r == nil {
		return nil
	}
	return r.Datacenter
}

func (r *pageSpeedsStatR) GetPagespeed() *PageSpeed {
	if r == nil {
		return nil
	}
	return r.Pagespeed
}

// pageSpeedsStatL is where Load methods for each relationship are stored.
type pageSpeedsStatL struct{}

var (
	pageSpeedsStatAllColumns            = []string{"time", "session_id", "project_id", "pagespeed_id", "url", "datacenter_id", "is_heart_beat", "success"}
	pageSpeedsStatColumnsWithoutDefault = []string{"time", "session_id", "project_id", "pagespeed_id", "datacenter_id", "is_heart_beat", "success"}
	pageSpeedsStatColumnsWithDefault    = []string{"url"}
	pageSpeedsStatPrimaryKeyColumns     = []string{"time", "pagespeed_id"}
	pageSpeedsStatGeneratedColumns      = []string{}
)

type (
	// PageSpeedsStatSlice is an alias for a slice of pointers to PageSpeedsStat.
	// This should almost always be used instead of []PageSpeedsStat.
	PageSpeedsStatSlice []*PageSpeedsStat
	// PageSpeedsStatHook is the signature for custom PageSpeedsStat hook methods
	PageSpeedsStatHook func(context.Context, boil.ContextExecutor, *PageSpeedsStat) error

	pageSpeedsStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pageSpeedsStatType                 = reflect.TypeOf(&PageSpeedsStat{})
	pageSpeedsStatMapping              = queries.MakeStructMapping(pageSpeedsStatType)
	pageSpeedsStatPrimaryKeyMapping, _ = queries.BindMapping(pageSpeedsStatType, pageSpeedsStatMapping, pageSpeedsStatPrimaryKeyColumns)
	pageSpeedsStatInsertCacheMut       sync.RWMutex
	pageSpeedsStatInsertCache          = make(map[string]insertCache)
	pageSpeedsStatUpdateCacheMut       sync.RWMutex
	pageSpeedsStatUpdateCache          = make(map[string]updateCache)
	pageSpeedsStatUpsertCacheMut       sync.RWMutex
	pageSpeedsStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pageSpeedsStatAfterSelectHooks []PageSpeedsStatHook

var pageSpeedsStatBeforeInsertHooks []PageSpeedsStatHook
var pageSpeedsStatAfterInsertHooks []PageSpeedsStatHook

var pageSpeedsStatBeforeUpdateHooks []PageSpeedsStatHook
var pageSpeedsStatAfterUpdateHooks []PageSpeedsStatHook

var pageSpeedsStatBeforeDeleteHooks []PageSpeedsStatHook
var pageSpeedsStatAfterDeleteHooks []PageSpeedsStatHook

var pageSpeedsStatBeforeUpsertHooks []PageSpeedsStatHook
var pageSpeedsStatAfterUpsertHooks []PageSpeedsStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PageSpeedsStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageSpeedsStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PageSpeedsStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageSpeedsStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PageSpeedsStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageSpeedsStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PageSpeedsStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageSpeedsStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PageSpeedsStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageSpeedsStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PageSpeedsStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageSpeedsStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PageSpeedsStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageSpeedsStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PageSpeedsStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageSpeedsStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PageSpeedsStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageSpeedsStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPageSpeedsStatHook registers your hook function for all future operations.
func AddPageSpeedsStatHook(hookPoint boil.HookPoint, pageSpeedsStatHook PageSpeedsStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pageSpeedsStatAfterSelectHooks = append(pageSpeedsStatAfterSelectHooks, pageSpeedsStatHook)
	case boil.BeforeInsertHook:
		pageSpeedsStatBeforeInsertHooks = append(pageSpeedsStatBeforeInsertHooks, pageSpeedsStatHook)
	case boil.AfterInsertHook:
		pageSpeedsStatAfterInsertHooks = append(pageSpeedsStatAfterInsertHooks, pageSpeedsStatHook)
	case boil.BeforeUpdateHook:
		pageSpeedsStatBeforeUpdateHooks = append(pageSpeedsStatBeforeUpdateHooks, pageSpeedsStatHook)
	case boil.AfterUpdateHook:
		pageSpeedsStatAfterUpdateHooks = append(pageSpeedsStatAfterUpdateHooks, pageSpeedsStatHook)
	case boil.BeforeDeleteHook:
		pageSpeedsStatBeforeDeleteHooks = append(pageSpeedsStatBeforeDeleteHooks, pageSpeedsStatHook)
	case boil.AfterDeleteHook:
		pageSpeedsStatAfterDeleteHooks = append(pageSpeedsStatAfterDeleteHooks, pageSpeedsStatHook)
	case boil.BeforeUpsertHook:
		pageSpeedsStatBeforeUpsertHooks = append(pageSpeedsStatBeforeUpsertHooks, pageSpeedsStatHook)
	case boil.AfterUpsertHook:
		pageSpeedsStatAfterUpsertHooks = append(pageSpeedsStatAfterUpsertHooks, pageSpeedsStatHook)
	}
}

// One returns a single pageSpeedsStat record from the query.
func (q pageSpeedsStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PageSpeedsStat, error) {
	o := &PageSpeedsStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for page_speeds_stats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PageSpeedsStat records from the query.
func (q pageSpeedsStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (PageSpeedsStatSlice, error) {
	var o []*PageSpeedsStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PageSpeedsStat slice")
	}

	if len(pageSpeedsStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PageSpeedsStat records in the query.
func (q pageSpeedsStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count page_speeds_stats rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pageSpeedsStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if page_speeds_stats exists")
	}

	return count > 0, nil
}

// Datacenter pointed to by the foreign key.
func (o *PageSpeedsStat) Datacenter(mods ...qm.QueryMod) datacenterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DatacenterID),
	}

	queryMods = append(queryMods, mods...)

	return Datacenters(queryMods...)
}

// Pagespeed pointed to by the foreign key.
func (o *PageSpeedsStat) Pagespeed(mods ...qm.QueryMod) pageSpeedQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PagespeedID),
	}

	queryMods = append(queryMods, mods...)

	return PageSpeeds(queryMods...)
}

// LoadDatacenter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pageSpeedsStatL) LoadDatacenter(ctx context.Context, e boil.ContextExecutor, singular bool, maybePageSpeedsStat interface{}, mods queries.Applicator) error {
	var slice []*PageSpeedsStat
	var object *PageSpeedsStat

	if singular {
		var ok bool
		object, ok = maybePageSpeedsStat.(*PageSpeedsStat)
		if !ok {
			object = new(PageSpeedsStat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePageSpeedsStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePageSpeedsStat))
			}
		}
	} else {
		s, ok := maybePageSpeedsStat.(*[]*PageSpeedsStat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePageSpeedsStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePageSpeedsStat))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageSpeedsStatR{}
		}
		args = append(args, object.DatacenterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageSpeedsStatR{}
			}

			for _, a := range args {
				if a == obj.DatacenterID {
					continue Outer
				}
			}

			args = append(args, obj.DatacenterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`datacenters`),
		qm.WhereIn(`datacenters.id in ?`, args...),
		qmhelper.WhereIsNull(`datacenters.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Datacenter")
	}

	var resultSlice []*Datacenter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Datacenter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for datacenters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for datacenters")
	}

	if len(datacenterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Datacenter = foreign
		if foreign.R == nil {
			foreign.R = &datacenterR{}
		}
		foreign.R.PageSpeedsStats = append(foreign.R.PageSpeedsStats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DatacenterID == foreign.ID {
				local.R.Datacenter = foreign
				if foreign.R == nil {
					foreign.R = &datacenterR{}
				}
				foreign.R.PageSpeedsStats = append(foreign.R.PageSpeedsStats, local)
				break
			}
		}
	}

	return nil
}

// LoadPagespeed allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pageSpeedsStatL) LoadPagespeed(ctx context.Context, e boil.ContextExecutor, singular bool, maybePageSpeedsStat interface{}, mods queries.Applicator) error {
	var slice []*PageSpeedsStat
	var object *PageSpeedsStat

	if singular {
		var ok bool
		object, ok = maybePageSpeedsStat.(*PageSpeedsStat)
		if !ok {
			object = new(PageSpeedsStat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePageSpeedsStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePageSpeedsStat))
			}
		}
	} else {
		s, ok := maybePageSpeedsStat.(*[]*PageSpeedsStat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePageSpeedsStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePageSpeedsStat))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageSpeedsStatR{}
		}
		args = append(args, object.PagespeedID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageSpeedsStatR{}
			}

			for _, a := range args {
				if a == obj.PagespeedID {
					continue Outer
				}
			}

			args = append(args, obj.PagespeedID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`page_speeds`),
		qm.WhereIn(`page_speeds.id in ?`, args...),
		qmhelper.WhereIsNull(`page_speeds.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PageSpeed")
	}

	var resultSlice []*PageSpeed
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PageSpeed")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for page_speeds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for page_speeds")
	}

	if len(pageSpeedAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pagespeed = foreign
		if foreign.R == nil {
			foreign.R = &pageSpeedR{}
		}
		foreign.R.PagespeedPageSpeedsStats = append(foreign.R.PagespeedPageSpeedsStats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PagespeedID == foreign.ID {
				local.R.Pagespeed = foreign
				if foreign.R == nil {
					foreign.R = &pageSpeedR{}
				}
				foreign.R.PagespeedPageSpeedsStats = append(foreign.R.PagespeedPageSpeedsStats, local)
				break
			}
		}
	}

	return nil
}

// SetDatacenter of the pageSpeedsStat to the related item.
// Sets o.R.Datacenter to related.
// Adds o to related.R.PageSpeedsStats.
func (o *PageSpeedsStat) SetDatacenter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Datacenter) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"page_speeds_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"datacenter_id"}),
		strmangle.WhereClause("\"", "\"", 2, pageSpeedsStatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Time, o.PagespeedID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DatacenterID = related.ID
	if o.R == nil {
		o.R = &pageSpeedsStatR{
			Datacenter: related,
		}
	} else {
		o.R.Datacenter = related
	}

	if related.R == nil {
		related.R = &datacenterR{
			PageSpeedsStats: PageSpeedsStatSlice{o},
		}
	} else {
		related.R.PageSpeedsStats = append(related.R.PageSpeedsStats, o)
	}

	return nil
}

// SetPagespeed of the pageSpeedsStat to the related item.
// Sets o.R.Pagespeed to related.
// Adds o to related.R.PagespeedPageSpeedsStats.
func (o *PageSpeedsStat) SetPagespeed(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PageSpeed) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"page_speeds_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pagespeed_id"}),
		strmangle.WhereClause("\"", "\"", 2, pageSpeedsStatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Time, o.PagespeedID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PagespeedID = related.ID
	if o.R == nil {
		o.R = &pageSpeedsStatR{
			Pagespeed: related,
		}
	} else {
		o.R.Pagespeed = related
	}

	if related.R == nil {
		related.R = &pageSpeedR{
			PagespeedPageSpeedsStats: PageSpeedsStatSlice{o},
		}
	} else {
		related.R.PagespeedPageSpeedsStats = append(related.R.PagespeedPageSpeedsStats, o)
	}

	return nil
}

// PageSpeedsStats retrieves all the records using an executor.
func PageSpeedsStats(mods ...qm.QueryMod) pageSpeedsStatQuery {
	mods = append(mods, qm.From("\"page_speeds_stats\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"page_speeds_stats\".*"})
	}

	return pageSpeedsStatQuery{q}
}

// FindPageSpeedsStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPageSpeedsStat(ctx context.Context, exec boil.ContextExecutor, time time.Time, pagespeedID int, selectCols ...string) (*PageSpeedsStat, error) {
	pageSpeedsStatObj := &PageSpeedsStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"page_speeds_stats\" where \"time\"=$1 AND \"pagespeed_id\"=$2", sel,
	)

	q := queries.Raw(query, time, pagespeedID)

	err := q.Bind(ctx, exec, pageSpeedsStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from page_speeds_stats")
	}

	if err = pageSpeedsStatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pageSpeedsStatObj, err
	}

	return pageSpeedsStatObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PageSpeedsStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no page_speeds_stats provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageSpeedsStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pageSpeedsStatInsertCacheMut.RLock()
	cache, cached := pageSpeedsStatInsertCache[key]
	pageSpeedsStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pageSpeedsStatAllColumns,
			pageSpeedsStatColumnsWithDefault,
			pageSpeedsStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pageSpeedsStatType, pageSpeedsStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pageSpeedsStatType, pageSpeedsStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"page_speeds_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"page_speeds_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into page_speeds_stats")
	}

	if !cached {
		pageSpeedsStatInsertCacheMut.Lock()
		pageSpeedsStatInsertCache[key] = cache
		pageSpeedsStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PageSpeedsStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PageSpeedsStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pageSpeedsStatUpdateCacheMut.RLock()
	cache, cached := pageSpeedsStatUpdateCache[key]
	pageSpeedsStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pageSpeedsStatAllColumns,
			pageSpeedsStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update page_speeds_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"page_speeds_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pageSpeedsStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pageSpeedsStatType, pageSpeedsStatMapping, append(wl, pageSpeedsStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update page_speeds_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for page_speeds_stats")
	}

	if !cached {
		pageSpeedsStatUpdateCacheMut.Lock()
		pageSpeedsStatUpdateCache[key] = cache
		pageSpeedsStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pageSpeedsStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for page_speeds_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for page_speeds_stats")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PageSpeedsStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageSpeedsStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"page_speeds_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pageSpeedsStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pageSpeedsStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pageSpeedsStat")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PageSpeedsStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no page_speeds_stats provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageSpeedsStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pageSpeedsStatUpsertCacheMut.RLock()
	cache, cached := pageSpeedsStatUpsertCache[key]
	pageSpeedsStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pageSpeedsStatAllColumns,
			pageSpeedsStatColumnsWithDefault,
			pageSpeedsStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pageSpeedsStatAllColumns,
			pageSpeedsStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert page_speeds_stats, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pageSpeedsStatPrimaryKeyColumns))
			copy(conflict, pageSpeedsStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"page_speeds_stats\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pageSpeedsStatType, pageSpeedsStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pageSpeedsStatType, pageSpeedsStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert page_speeds_stats")
	}

	if !cached {
		pageSpeedsStatUpsertCacheMut.Lock()
		pageSpeedsStatUpsertCache[key] = cache
		pageSpeedsStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PageSpeedsStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PageSpeedsStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PageSpeedsStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pageSpeedsStatPrimaryKeyMapping)
	sql := "DELETE FROM \"page_speeds_stats\" WHERE \"time\"=$1 AND \"pagespeed_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from page_speeds_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for page_speeds_stats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pageSpeedsStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pageSpeedsStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from page_speeds_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for page_speeds_stats")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PageSpeedsStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pageSpeedsStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageSpeedsStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"page_speeds_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pageSpeedsStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pageSpeedsStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for page_speeds_stats")
	}

	if len(pageSpeedsStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PageSpeedsStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPageSpeedsStat(ctx, exec, o.Time, o.PagespeedID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PageSpeedsStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PageSpeedsStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageSpeedsStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"page_speeds_stats\".* FROM \"page_speeds_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pageSpeedsStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PageSpeedsStatSlice")
	}

	*o = slice

	return nil
}

// PageSpeedsStatExists checks if the PageSpeedsStat row exists.
func PageSpeedsStatExists(ctx context.Context, exec boil.ContextExecutor, time time.Time, pagespeedID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"page_speeds_stats\" where \"time\"=$1 AND \"pagespeed_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time, pagespeedID)
	}
	row := exec.QueryRowContext(ctx, sql, time, pagespeedID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if page_speeds_stats exists")
	}

	return exists, nil
}

// Exists checks if the PageSpeedsStat row exists.
func (o *PageSpeedsStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PageSpeedsStatExists(ctx, exec, o.Time, o.PagespeedID)
}
